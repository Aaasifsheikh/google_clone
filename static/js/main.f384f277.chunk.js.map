{"version":3,"sources":["Image/2WhatsApp Image 2020-10-08 at 3.09.05 PM.jpeg","searchResult.jsx","Search.jsx","Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","searchResult","Search","hideButtons","useState","input","setInput","history","useHistory","searchPage","e","console","log","push","preventDefault","className","type","value","onChange","target","placeholder","Button","onClick","variant","url","clientAccessToken","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Home","to","Avatar","src","image","alt","App","Fragment","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,uE,oTCU5BC,EARM,WACnB,OACE,6BACE,uD,QCkESC,EA9DA,WAA0B,IAAzBC,EAAwB,0DACZC,qBADY,mBAC/BC,EAD+B,KACxBC,EADwB,KAEhCC,EAAUC,cACVC,EAAa,SAACC,GAClBC,QAAQC,IAAIP,GACZE,EAAQM,KAAK,iBACbH,EAAEI,kBAEJ,OACE,yBAAKC,UAAU,SACb,0BAAMA,UAAU,UACd,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAYA,UAAU,qBACtB,2BACEC,KAAK,OACLC,MAAOZ,EACPa,SAAU,SAACR,GAAD,OAAOJ,EAASI,EAAES,OAAOF,QACnCF,UAAU,QACVK,YAAY,6BAEd,kBAAC,IAAD,CAASL,UAAU,sBAEnBZ,EAQA,yBAAKY,UAAU,kBACb,kBAACM,EAAA,EAAD,CACEL,KAAK,SACLM,QAASb,EACTc,QAAQ,WACRR,UAAU,uBAJZ,iBAQA,kBAACM,EAAA,EAAD,CAAQE,QAAQ,WAAWR,UAAU,uBAArC,sBAhBF,yBAAKA,UAAU,kBACb,kBAACM,EAAA,EAAD,CAAQL,KAAK,SAASM,QAASb,EAAYc,QAAQ,YAAnD,iBAGA,kBAACF,EAAA,EAAD,CAAQE,QAAQ,YAAhB,uBAkBN,kBAAC,IAAD,CACEC,IAAI,mCACJC,kBAAkB,qKAClBC,SAAU,IACVC,aAAa,EACbC,iBAAiB,MACjBC,SAAS,GACTC,cAAY,EACZC,UAAW,aACXC,UAAW,aACXC,cAAe,aACfC,UAAW,iB,iBCjCJC,EAzBF,WACX,OACE,yBAAKpB,UAAU,QACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAASqB,GAAG,UAAZ,SACA,kBAAC,IAAD,CAASA,GAAG,UAAZ,UAEF,yBAAKrB,UAAU,oBACb,kBAAC,IAAD,CAASqB,GAAG,IAAZ,SACA,kBAAC,IAAD,CAASA,GAAG,IAAZ,UACA,kBAAC,IAAD,MACA,kBAACC,EAAA,EAAD,QAGJ,yBAAKtB,UAAU,aACb,yBAAKuB,IAAKC,IAAOC,IAAI,MAEvB,yBAAKzB,UAAU,uBACb,kBAAC,EAAD,CAAQZ,aAAW,O,MCJZsC,MAff,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWT,IAC3B,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAOU,OAAK,EAACF,KAAK,gBAAgBC,UAAW3C,QCHnC6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.f384f277.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2WhatsApp Image 2020-10-08 at 3.09.05 PM.09cf3655.jpeg\";","import React from \"react\";\r\n\r\nconst searchResult = () => {\r\n  return (\r\n    <div>\r\n      <h1>I am search page!!!! </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default searchResult;\r\n","import React, { useState } from \"react\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport \"./Search.css\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport searchResult from \"./searchResult\";\r\nimport InstagramEmbed from \"react-instagram-embed\";\r\n\r\nconst Search = (hideButtons = false) => {\r\n  const [input, setInput] = useState();\r\n  const history = useHistory();\r\n  const searchPage = (e) => {\r\n    console.log(input);\r\n    history.push(\"/searchResult\");\r\n    e.preventDefault();\r\n  };\r\n  return (\r\n    <div className=\"aasif\">\r\n      <form className=\"Search\">\r\n        <div className=\"Search_Input\">\r\n          <SearchIcon className=\"Search_inputIcon\" />\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            className=\"input\"\r\n            placeholder=\"Search something here...\"\r\n          />\r\n          <MicIcon className=\"Search_inputIcon\" />\r\n        </div>\r\n        {!hideButtons ? (\r\n          <div className=\"Search_Buttons\">\r\n            <Button type=\"submit\" onClick={searchPage} variant=\"outlined\">\r\n              Google Search\r\n            </Button>\r\n            <Button variant=\"outlined\">I'm Feeling Lucky</Button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"Search_Buttons\">\r\n            <Button\r\n              type=\"submit\"\r\n              onClick={searchPage}\r\n              variant=\"outlined\"\r\n              className=\"search_hiddenButton\"\r\n            >\r\n              Google Search\r\n            </Button>\r\n            <Button variant=\"outlined\" className=\"search_hiddenButton\">\r\n              I'm Feeling Lucky\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </form>\r\n      <InstagramEmbed\r\n        url=\"https://instagram/p/CDWIKGvBgup/\"\r\n        clientAccessToken=\"IGQVJXeEVsamdQa3YwZADBlUFJWRTFjZAFJia0tjalhDY1lZARFlsWlV1cXJLMWFtbVpKSnhPNE96bkJQN25DSU8tUlBQYUQxRFFyMFRwb2tDZA0NTSlpDSkUyWXMwYk5kekZA5WHpTb0ZALV05RNmJsdGs4cwZDZD\"\r\n        maxWidth={320}\r\n        hideCaption={false}\r\n        containerTagName=\"div\"\r\n        protocol=\"\"\r\n        injectScript\r\n        onLoading={() => {}}\r\n        onSuccess={() => {}}\r\n        onAfterRender={() => {}}\r\n        onFailure={() => {}}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport Homecss from \"./Home.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport AppsIcon from \"@material-ui/icons/Apps\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport Search from \"./Search\";\r\nimport image from \"./Image/2WhatsApp Image 2020-10-08 at 3.09.05 PM.jpeg\";\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <div className=\"home_header\">\r\n        <div className=\"home_headerLeft\">\r\n          <NavLink to=\"/about\">About</NavLink>\r\n          <NavLink to=\"/store\">Store</NavLink>\r\n        </div>\r\n        <div className=\"home_headerRight\">\r\n          <NavLink to=\"\">Gmail</NavLink>\r\n          <NavLink to=\"\">Images</NavLink>\r\n          <AppsIcon />\r\n          <Avatar />\r\n        </div>\r\n      </div>\r\n      <div className=\"home_body\">\r\n        <img src={image} alt=\"\" />\r\n      </div>\r\n      <div className=\"home_inputContainer\">\r\n        <Search hideButtons />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport Home from \"./Home\";\nimport \"./App.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Switch, Route } from \"react-router-dom\";\nimport searchResult from \"./searchResult\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Home />\n\n          <Route exact path=\"/searchResult\" component={searchResult} />\n        </Switch>\n      </BrowserRouter>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}